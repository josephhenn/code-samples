-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies (id INT, name TEXT, score INT);
CREATE TABLE movie_cast (movie_id INT, cast_id TEXT, cast_name INT);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import movie-name-score.txt movies
.import movie-cast.txt movie_cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON movie_cast(cast_id);
CREATE INDEX movie_index ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

SELECT (COUNT(id)*1.0)/(SELECT COUNT(id) FROM movies) AS prop FROM movies WHERE score>50;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]


SELECT id,name,score FROM movies ORDER BY score DESC, name ASC LIMIT 7;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id,cast_name,COUNT(cast_name) AS movie_count FROM movie_cast GROUP BY cast_name ORDER BY movie_count DESC, cast_name ASC LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

select cast_id,cast_name,AVG(score) AS average_score FROM movie_cast INNER JOIN movies ON movie_cast.movie_id = movies.id WHERE score>=50 GROUP BY cast_id HAVING COUNT(movie_id)>2 ORDER BY average_score DESC, cast_name ASC LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS SELECT a.cast_id AS cast_member_id1,b.cast_id AS cast_member_id2, COUNT(*) AS movie_count,AVG(score) AS average_movie_score FROM ((movie_cast a INNER JOIN movie_cast b ON a.movie_id = b.movie_id AND a.cast_id < b.cast_id) INNER JOIN movies ON a.movie_id=movies.id) WHERE cast_member_id1 != cast_member_id2 GROUP BY cast_member_id1, cast_member_id2 HAVING average_movie_score>=40 AND movie_count >= 3;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

select cast_member_id1 as cast_id,(select cast_name from movie_cast where cast_member_id1=movie_cast.cast_id) AS cast_name,AVG(average_movie_score) as collaboration_score FROM (select cast_member_id1,average_movie_score from good_collaboration UNION ALL select cast_member_id2,average_movie_score from good_collaboration) as outer group by cast_id order by collaboration_score DESC, cast_name ASC LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]


CREATE VIRTUAL TABLE movie_overview USING fts3(id integer, name text, year integer, overview text, popularity decimal);
.import movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) AS count_overview FROM movie_overview WHERE overview MATCH 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id FROM movie_overview WHERE overview MATCH 'love NEAR/5 story';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --